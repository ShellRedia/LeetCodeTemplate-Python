{
    // 搜索方向
	"directions-4":{
		"prefix": "d4",
		"body":[
			"for dx, dy in (0, 1), (1, 0), (-1, 0), (0, -1):",
			"	nx, ny = x + dx, y + dy",
			"	if 0 <= nx < m and 0 <= ny < n:",
			"		"
		],
	},
	"directions-8":{
		"prefix": "d8",
		"body":[
			"for dx, dy in (0, 1), (1, 0), (-1, 0), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1):",
			"	nx, ny = x + dx, y + dy",
			"	if 0 <= nx < m and 0 <= ny < n:",
			"		"
		],
	},
    "directions-12":{
		"prefix": "d1-2",
		"body":[
			"for dx, dy in (1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1):",
			"	nx, ny = x + dx, y + dy",
			"	if 0 <= nx < m and 0 <= ny < n:",
			"		"
		],
	},
	// 特殊键盘
	"keyboard-t9":{
		"prefix": "t9",
		"body":[
			"t9 = {2:'abc', 3:'def', 4:'ghi', 5:'jkl', 6:'mno', 7:'pqrs', 8:'tuv', 9:'wxyz'}"
		],
	},
    // MOD
	"MOD":{
		"prefix": "MOD",
		"body":[
			"MOD = 10 ** 9 + 7"
		],
		"description":"MOD"
	},
	// 循环码生成
	"cyclic_code":{
		"prefix": "cyclic",
		"body":[
			"def cyclic_code(n):",
			"    if n <= 0: return []",
			"    codes = ['0', '1']",
			"    for i in range(n - 1): codes = [code + '0' for code in codes] + [code + '1' for code in reversed(codes)]",
			"    return codes",
			"cyc_lst = cyclic_code(n) # n = 2: ['00', '10', '11', '01']",
		],
	},
	// 获取质因数
	"get prime factors of a number":{
		"prefix": "prime_factors",
		"body":[
			"@cache",
			"def get_prime_factors(n: int) -> list:",
			"    factors, i = [], 2",
			"    while i ** 2 <= n:",
			"        if n % i: i += 1",
			"        else:",
			"            n //= i",
			"            factors.append(i)",
			"    if n > 1: factors.append(n)",
			"    return factors",
			"factors = get_prime_factors(n) # 包含重复元素"		
		],
	},
	// 欧拉筛获取质数
	"get prime numbers":{
		"prefix": "prime_numbers",
		"body":[
			"N = 10 ** 7",
			"primes = [True] * (N + 1)",
			"primes[0] = primes[1] = False",
			"p = 2",
			"while p * p <= N:",
			"    if primes[p]:",
			"        for i in range(p * p, N + 1, p): primes[i] = False",
			"    p += 1",
			"prime_numbers = [i for i, is_prime in enumerate(primes) if is_prime]",
		],
	},
}